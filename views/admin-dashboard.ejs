    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Admin Dashboard</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <style>
          .label {
            text-align: center;
            font-size: 14px;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 3px #000;
          }
        </style>
    </head>
    <body class="bg-light">
        <!-- Bootstrap Navbar -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container">
                <a class="navbar-brand" href="#">Admin Dashboard</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/students">Student Details</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/rooms">Room Details</a>
                        </li>
                    </ul>
                </div>
                <div class="navbar-nav ml-auto">
                    <span class="navbar-text">
                        Hello, Admin
                    </span>
                    <img src="path/to/profile/image.png" alt="Profile Image" class="rounded-circle ml-2" style="width: 40px;">
                    <button class="btn btn-danger ml-3" onclick="logout()">Logout</button>
                </div>
            </div>
        </nav>

        <!-- Charts Grid -->
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-6">
                    <h3>Gender Distribution</h3>
                    <canvas id="genderDistributionChart"></canvas>
                </div>
                <div class="col-md-6">
                    <h3>Students by Faculty</h3>
                    <canvas id="studentsByFacultyChart"></canvas>
                </div>
                <div class="col-md-6">
                    <h3>Room Environment Preference</h3>
                    <canvas id="roomEnvironmentPreferenceChart"></canvas>
                </div>
              <div class="col-md-6">
                <h3>Student Registration Over Time</h3>
                <label for="yearFilter">Year:</label>
                <select id="yearFilter" onchange="updateChart()">
                  <!-- Year options will be populated dynamically by JavaScript -->
                </select>

                <canvas id="studentRegistrationOverTimeChart"></canvas>
              </div>


                <canvas id="studentRegistrationOverTimeChart"></canvas>
              </div>
              <div class="col-md-6">
                <h3>Students by Year of Study</h3>
                <canvas id="studentsByYearOfStudyChart"></canvas>
              </div>
                <div class="col-md-6">
                    <h3>Room Type Distribution</h3>
                    <canvas id="roomTypeDistributionChart"></canvas>
                </div>
              <div class="col-md-6">
                <h3>Room Occupancy</h3>
                <canvas id="roomOccupancyChart" style="max-height: 400px;"></canvas>
                <div style="text-align: center; margin-top: 10px;">
                  <span style="display: inline-block; width: 16.66%;">Male</span>
                  <span style="display: inline-block; width: 16.66%;"></span>
                  <span style="display: inline-block; width: 16.66%;"></span>
                  <span style="display: inline-block; width: 16.66%;">Female</span>
                  <span style="display: inline-block; width: 16.66%;"></span>
                  <span style="display: inline-block; width: 16.66%;"></span>
                </div>
              </div>
                <div class="col-12">
                    <h3>State of Residence</h3>
                    <div id="stateOfResidenceMap" style="height: 500px;"></div>
                </div>
            </div>
        </div>



        
        <script>
          async function fetchChartData(url) {
            const response = await fetch(url);
            return await response.json();
          }



          // Gender Distribution Pie Chart
              // Gender Distribution Pie Chart with Percentages
              async function renderGenderDistributionChart() {
                const data = await fetchChartData('/admin/gender-distribution');
                const labels = data.map(item => item.std_gender);
                const counts = data.map(item => item.count);
                const total = counts.reduce((sum, count) => sum + count, 0);

                new Chart(document.getElementById('genderDistributionChart'), {
                  type: 'pie',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: 'Gender Distribution',
                      data: counts,
                      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],
                    }]
                  },
                  options: {
                    plugins: {
                      datalabels: {
                        formatter: (value, context) => {
                          const percentage = (value / total * 100).toFixed(1);
                          return `${percentage}%`;
                        },
                        color: '#fff',
                        font: {
                          weight: 'bold'
                        }
                      }
                    }
                  },
                  plugins: [ChartDataLabels]
                });
              }

              // Students by Faculty Bar Chart with Customizations
              async function renderStudentsByFacultyChart() {
                const data = await fetchChartData('/admin/students-by-faculty');
                const labels = data.map(item => item.std_faculty);
                const counts = data.map(item => item.count);
                const maxCount = Math.max(...counts);

                new Chart(document.getElementById('studentsByFacultyChart'), {
                  type: 'bar',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: 'Number of Students',
                      data: counts,
                      backgroundColor: counts.map(count => count === maxCount ? 'red' : 'gray')
                    }]
                  },
                  options: {
                    indexAxis: 'y',
                    scales: {
                      x: {
                        beginAtZero: true,
                        grid: {
                          display: false
                        }
                      },
                      y: {
                        grid: {
                          display: false
                        }
                      }
                    },
                    plugins: {
                      datalabels: {
                        anchor: 'end',
                        align: 'end',
                        color: 'black',
                        font: {
                          weight: 'bold'
                        }
                      }
                    }
                  },
                  plugins: [ChartDataLabels]
                });
              }

          // Room Environment Preference Pie Chart
              async function renderRoomEnvironmentPreferenceChart() {
                const data = await fetchChartData('/admin/room-environment-preference');
                const labels = data.map(item => item.std_pref);
                const counts = data.map(item => item.count);
                const total = counts.reduce((sum, count) => sum + count, 0);

                new Chart(document.getElementById('roomEnvironmentPreferenceChart'), {
                  type: 'doughnut',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: 'Room Environment Preference',
                      data: counts,
                      backgroundColor: ['#009596', '#06C', '#EC7A08','grey']
                    }]
                  },
                  options: {
                    plugins: {
                      datalabels: {
                        formatter: (value, context) => {
                          const percentage = (value / total * 100).toFixed(1);
                          return `${percentage}%`;
                        },
                        color: '#fff',
                        font: {
                          weight: 'bold'
                        }
                      }
                    }
                  },
                  plugins: [ChartDataLabels]
                });
              }



          // Year of Degree Column Chart
          // Students by Year of Study Column Chart with Customizations
          async function renderStudentsByYearOfStudyChart() {
            const data = await fetchChartData('/admin/year-of-degree');
            const labels = ["FIRST", "SECOND", "THIRD", "FOURTH"];
            const counts = labels.map(label => {
              const item = data.find(d => d.std_year.toUpperCase() === label);
              return item ? item.count : 0;
            });

            new Chart(document.getElementById('studentsByYearOfStudyChart'), {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [{
                  label: 'Number of Students',
                  data: counts,
                  backgroundColor: '#519DE9'
                }]
              },
              options: {
                scales: {
                  x: {
                    grid: {
                      display: false
                    }
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  datalabels: {
                    anchor: 'end',
                    align: 'end',
                    color: 'black',
                    font: {
                      weight: 'bold'
                    }
                  }
                }
              },
              plugins: [ChartDataLabels]
            });
          }
            // Room type distribution Chart
          async function renderRoomTypeDistributionChart() {
            const data = await fetchChartData('/admin/room-type-distribution');
            const labels = ['Single Room', 'Double Room', 'Quad Room'];
            const maleCounts = labels.map(label => {
              const roomCapacity = label === 'Single Room' ? 1 : label === 'Double Room' ? 2 : 4;
              const item = data.find(d => d.room_capacity == roomCapacity && d.room_gender === 'Male');
              return item ? item.count : 0;
            });
            const femaleCounts = labels.map(label => {
              const roomCapacity = label === 'Single Room' ? 1 : label === 'Double Room' ? 2 : 4;
              const item = data.find(d => d.room_capacity == roomCapacity && d.room_gender === 'Female');
              return item ? item.count : 0;
            });

            const totalCounts = labels.map((label, index) => maleCounts[index] + femaleCounts[index]);

            new Chart(document.getElementById('roomTypeDistributionChart'), {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [
                  {
                    label: 'Male',
                    data: maleCounts,
                    backgroundColor: '#36A2EB',
                  },
                  {
                    label: 'Female',
                    data: femaleCounts,
                    backgroundColor: '#FF6384',
                  }
                ]
              },
              options: {
                layout: {
                  padding: {
                    top: 20,
                    bottom: 20
                  }
                },
                scales: {
                  x: {
                    grid: {
                      display: false
                    },
                    stacked: true
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    },
                    stacked: true
                  }
                },
                plugins: {
                  legend: {
                    position: 'bottom',
                  },
                  datalabels: {
                    color: 'black',
                    display: function(context) {
                      return context.datasetIndex === context.chart.data.datasets.length - 1;
                    },
                    anchor: 'end',
                    align: 'top',
                    offset: 6,
                    font: {
                      weight: 'bold'
                    },
                    formatter: function(value, context) {
                      const index = context.dataIndex;
                      return totalCounts[index];
                    }
                  }
                }
              },
              plugins: [ChartDataLabels]
            });
          }



          
            // Room occupancy Chart
          async function renderRoomOccupancyChart() {
            const data = await fetchChartData('/admin/room-occupancy');
            const labels = ['Single Room', 'Double Room', 'Quad Room'];

            const maleData = {
              'Single Room': { total_occupancy: 0, bed_avail: 0 },
              'Double Room': { total_occupancy: 0, bed_avail: 0 },
              'Quad Room': { total_occupancy: 0, bed_avail: 0 }
            };

            const femaleData = {
              'Single Room': { total_occupancy: 0, bed_avail: 0 },
              'Double Room': { total_occupancy: 0, bed_avail: 0 },
              'Quad Room': { total_occupancy: 0, bed_avail: 0 }
            };

            data.forEach(item => {
              const roomType = item.room_capacity === 1 ? 'Single Room' : item.room_capacity === 2 ? 'Double Room' : 'Quad Room';
              if (item.room_gender === 'Male') {
                maleData[roomType].total_occupancy = item.total_occupancy;
                maleData[roomType].bed_avail = item.bed_avail;
              } else {
                femaleData[roomType].total_occupancy = item.total_occupancy;
                femaleData[roomType].bed_avail = item.bed_avail;
              }
            });

            const labelsExpanded = [
              'Single Room', 
              'Double Room', 
              'Quad Room', 
              'Single Room', 
              'Double Room', 
              'Quad Room'
            ];
            const totalOccupancy = [
              maleData['Single Room'].total_occupancy,
              maleData['Double Room'].total_occupancy,
              maleData['Quad Room'].total_occupancy,
              femaleData['Single Room'].total_occupancy,
              femaleData['Double Room'].total_occupancy,
              femaleData['Quad Room'].total_occupancy
            ];
            const bedAvail = [
              maleData['Single Room'].bed_avail,
              maleData['Double Room'].bed_avail,
              maleData['Quad Room'].bed_avail,
              femaleData['Single Room'].bed_avail,
              femaleData['Double Room'].bed_avail,
              femaleData['Quad Room'].bed_avail
            ];

            new Chart(document.getElementById('roomOccupancyChart'), {
              type: 'bar',
              data: {
                labels: labelsExpanded,
                datasets: [
                  {
                    label: 'Total Occupancy',
                    data: totalOccupancy,
                    backgroundColor: '#36A2EB',
                  },
                  {
                    label: 'Available Beds',
                    data: bedAvail,
                    backgroundColor: '#F5DEB3',
                  }
                ]
              },
              options: {
                scales: {
                  x: {
                    grid: {
                      display: true
                    }
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  datalabels: {
                    anchor: 'end',
                    align: 'end',
                    color: 'black',
                    font: {
                      weight: 'bold'
                    },
                    formatter: function(value, context) {
                      return value;
                    }
                  }
                },
                responsive: true,
                maintainAspectRatio: false
              },
              plugins: [ChartDataLabels]
            });
          }

             // state of residence Chart
              async function renderStateOfResidenceMap() {
                const data = await fetchChartData('/admin/state-of-residence');
                const stateData = {};
                data.forEach(item => {
                  stateData[item.std_state.toUpperCase()] = item.count;
                });

                // Fetch Malaysia GeoJSON data
                const response = await fetch('/malaysia-states.json');
                const statesGeoJSON = await response.json();

                // Filter the GeoJSON to include only the specified states
                const filteredGeoJSON = {
                  type: 'FeatureCollection',
                  features: statesGeoJSON.features.filter(feature =>
                    ['JOHOR', 'KEDAH', 'KELANTAN', 'MELAKA', 'NEGERI SEMBILAN', 'PAHANG', 'PULAU PINANG', 'PERAK', 'PERLIS', 'SABAH', 'SARAWAK', 'SELANGOR', 'TERENGGANU', 'KUALA LUMPUR', 'LABUAN', 'PUTRAJAYA']
                    .includes(feature.properties.name.toUpperCase())
                  )
                };

                const map = L.map('stateOfResidenceMap').setView([4.2105, 101.9758], 6); // Centered on Malaysia

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                  maxZoom: 18,
                }).addTo(map);

                L.geoJSON(filteredGeoJSON, {
                  style: feature => {
                    const count = stateData[feature.properties.name.toUpperCase()] || 0;
                    const fillColor = count > 50 ? '#800026' :
                                      count > 20 ? '#BD0026' :
                                      count > 10 ? '#E31A1C' :
                                      count > 5  ? '#FC4E2A' :
                                      count > 0  ? '#FD8D3C' : '#FFEDA0';
                    return { fillColor, weight: 2, opacity: 1, color: 'white', dashArray: '3', fillOpacity: 0.7 };
                  },
                  onEachFeature: (feature, layer) => {
                    const count = stateData[feature.properties.name.toUpperCase()] || 0;
                    const center = layer.getBounds().getCenter();
                    L.marker(center, {
                      icon: L.divIcon({
                        className: 'label',
                        html: `<div>${count}</div>`,
                        iconSize: [30, 30]
                      })
                    }).addTo(map);
                    layer.bindPopup(`${feature.properties.name}: ${count} students`);
                  }
                }).addTo(map);
              }

          // Render all charts
          renderGenderDistributionChart();
          renderStudentsByFacultyChart();
          renderRoomEnvironmentPreferenceChart();
          renderStudentsByYearOfStudyChart();
          renderRoomTypeDistributionChart();
          renderRoomOccupancyChart();
          renderStateOfResidenceMap();
        </script>

      
        <script>
            // Student Registration Over Time Line Chart
          async function fetchFilteredData(year) {
            // Adjust the URL and query parameters based on the filters
            let url = `/admin/student-registration-over-time?year=${year}`;
            return await fetchChartData(url);
          }

          let registrationChart;

          function getMonthLabels(year) {
            const months = [];
            for (let month = 0; month < 12; month++) {
              months.push(new Date(year, month, 1).toISOString().split('T')[0]);
            }
            return months;
          }

          async function updateChart() {
            const year = document.getElementById('yearFilter').value;
            const data = await fetchFilteredData(year);

            // Initialize arrays of months with zero counts for males and females
            const monthLabels = getMonthLabels(year);
            const maleCounts = Array(12).fill(0);
            const femaleCounts = Array(12).fill(0);

            // Populate the counts arrays with actual data
            data.forEach(item => {
              const monthIndex = new Date(item.date).getMonth();
              if (item.std_gender === 'Male') {
                maleCounts[monthIndex] = item.count;
              } else if (item.std_gender === 'Female') {
                femaleCounts[monthIndex] = item.count;
              }
            });

            if (registrationChart) {
              registrationChart.destroy();
            }

            registrationChart = new Chart(document.getElementById('studentRegistrationOverTimeChart'), {
              type: 'line',
              data: {
                labels: monthLabels,
                datasets: [
                  {
                    label: 'Male Registrations',
                    data: maleCounts,
                    backgroundColor: 'rgba(54, 162, 235, 1)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    fill: false
                  },
                  {
                    label: 'Female Registrations',
                    data: femaleCounts,
                    backgroundColor: 'rgba(255, 99, 132, 1)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 2,
                    fill: false
                  }
                ]
              },
              options: {
                scales: {
                  x: {
                    type: 'time',
                    time: {
                      unit: 'month',
                      tooltipFormat: 'MMM yyyy',
                      displayFormats: {
                        month: 'MMM yyyy'
                      }
                    },
                    grid: {
                      display: false
                    }
                  },
                  y: {
                    beginAtZero: true,
                    ticks: {
                      precision: 0
                    },
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  legend: {
                    display: true
                  }
                }
              },
             // plugins: [ChartDataLabels]
            });
          }

          function populateYearOptions() {
            const currentYear = new Date().getFullYear();
            const yearFilter = document.getElementById('yearFilter');
            for (let year = currentYear; year >= 2000; year--) {
              const option = document.createElement('option');
              option.value = year;
              option.text = year;
              yearFilter.add(option);
            }
            yearFilter.value = currentYear; // Set the default value to the current year
          }

          document.addEventListener('DOMContentLoaded', () => {
            populateYearOptions();
            updateChart();
          });

          renderStudentRegistrationOverTimeChart();
        </script>


 
    </script>
        <script>
            function logout() {
                // Clear any client-side authentication data if necessary
                // For example, you might want to clear cookies or localStorage items
                // localStorage.removeItem('authToken');
                window.location.href = '/admin-login.html';
            }
        </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
