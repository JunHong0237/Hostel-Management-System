    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Admin Dashboard</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/html2canvas/dist/html2canvas.min.js"></script>
      <style>
        .label {
            text-align: center;
            font-size: 14px;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 3px #000;
        }
        .summary-cards {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }
        .summary-card {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            text-align: center;
            width: 30%;
        }
        .summary-card h3 {
            margin-bottom: 10px;
            font-size: 18px;
            color: #333;
        }
        .summary-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        .charts-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }
        .chart-card {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 8px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        .chart-card h3 {
            margin-bottom: 10px;
            font-size: 18px;
            color: #333;
        }



        /* Specific size adjustments for each card */
        .gender-distribution-card {
            width: calc(33% - 10px); /* One third width */
        }

        .student-registration-card {
            width: calc(65% - 10px); /* Half width */

        }

        .students-by-faculty-card {
            width: calc(63% - 25px); /* One quarter width */
          display: flex;
          flex-direction: column;
          justify-content: center;
        }

        .students-by-year-card {
            width: calc(63% - 25px); /* 40% width */
        }

        .room-environment-card {
            width: calc(37% - 5px); /* 30% width */
        }

        .room-occupancy-card {
            width: calc(37% - 5px); /* 45% width */
        }
        
        /* Specific styles for the Room Type Distribution card */
        .room-type-card {
          width: 100%; /* 35% width */
            display: flex;
            flex-direction: column;
            justify-content: center;
        }


        .state-of-residence-card {
            width: 100%; /* Full width */
        }

        .button-container {
            display: flex;
            justify-content: center;    
        }
        .button-container .btn {
            margin: 0 10px; /* Space between the buttons */
        }
      </style>
      </head>
      <body class="bg-light">
      <!-- Bootstrap Navbar -->
        <div class="container">
        <nav class="navbar navbar-light bg-light">
            <div class="container mt-0">
                <a class="navbar-brand" href="/admin/dashboard" style="color: black; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">Dashboard</a>
                <div style="display: flex; align-items: center;">
                    <a class="nav-link" href="/admin/students" style="color: black;">Student Details</a>
                    <a class="nav-link" href="/admin/rooms" style="color: black;">Room Details</a>
                </div>
                <div style="display: flex; align-items: center; margin-left: auto;">
                    <span class="mr-3">Hello, Admin</span>
                    <div class="dropdown">
                        <button class="btn btn-link" type="button" id="settingsDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <img src="/images/setting.png" alt="Settings" width="20" height="20">
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="settingsDropdown" style="position: absolute;">
                            <a class="dropdown-item" href="#" onclick="logout()">Logout</a>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        </div>



<div class="container">
      <div class="container mt-2">
        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="summary-card">
                <h3>Total Students</h3>
                <p id="totalStudents" class="summary-number"></p>
            </div>
            <div class="summary-card">
                <h3>Available Beds</h3>
                <p id="availableBeds" class="summary-number"></p>
            </div>
            <div class="summary-card">
                <h3>Total Rooms</h3>
                <p id="totalRooms" class="summary-number"></p>
            </div>
        </div>

  <!-- Charts Grid -->
  <div class="charts-container">
      <div class="chart-card gender-distribution-card">
          <h3>Gender Distribution</h3>
          <canvas id="genderDistributionChart"></canvas>
      </div>
      <div class="chart-card student-registration-card">
          <h3>Student Registration Over Time</h3>
          <label for="yearFilter">Year:</label>
          <select id="yearFilter" onchange="updateChart()">
            <!-- Year options will be populated dynamically by JavaScript -->
          </select>
          <canvas id="studentRegistrationOverTimeChart"></canvas>
      </div>
    <div class="chart-card students-by-year-card">
        <h3>Students by Year of Study</h3>
        <canvas id="studentsByYearOfStudyChart"></canvas>
    </div>

    <div class="chart-card room-environment-card">
        <h3>Room Environment Preference</h3>
        <canvas id="roomEnvironmentPreferenceChart"></canvas>
    </div>
    <div class="chart-card students-by-faculty-card">
        <h3>Students by Faculty</h3>
      <div class="chart-container">
        <canvas id="studentsByFacultyChart"></canvas>
      </div>
        
    </div>
    <div class="chart-card room-occupancy-card">
        <h3>Room Occupancy</h3>
        <canvas id="roomOccupancyChart" style="max-height: 400px;"></canvas>
        <div style="text-align: center; margin-top: 10px;">
          <span style="display: inline-block; width: 16.66%;"></span>
            <span style="display: inline-block; width: 16.66%;">Male</span>
            <span style="display: inline-block; width: 16.66%;"></span>
            <span style="display: inline-block; width: 16.66%;"></span>
            <span style="display: inline-block; width: 16.66%;">Female</span>
            <span style="display: inline-block; width: 16.66%;"></span>
            <span style="display: inline-block; width: 16.66%;"></span>
        </div>
    </div>
    <div class="chart-card room-type-card">
        <h3>Room Type Distribution</h3>
        <div class="chart-container">
            <canvas id="roomTypeDistributionChart"></canvas>
        </div>
    </div>
      <div class="chart-card state-of-residence-card" style="width: 100%;">
          <h3>State of Residence</h3>
          <div id="stateOfResidenceMap" style="height: 500px;"></div>
      </div>
  </div>

<br>
  <div class="container button-container">
      <!-- Button to trigger report generation -->
      <button id="generateReportButton" class="btn btn-primary">Generate Report</button>

      <!-- Button to trigger chart display -->
      <button id="displayChartsButton" class="btn btn-primary">Display Charts</button>
  </div>
<br>

      <!-- Report Modal -->
      <div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-labelledby="reportModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="reportModalLabel">Generated Report</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div id="loadingSpinner" class="text-center" style="display: none;">
                <div class="spinner-border" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
              <div id="reportContainer" style="white-space: pre-wrap;"></div>
            </div>
            <div class="modal-footer">
              <button id="downloadReportButton" class="btn btn-success">Download Report</button>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Download message -->
       <div id="downloadingMessage" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); z-index: 1000; background-color: #00ff33; padding: 10px; border: 1px solid #ccc;">
           Downloading report...
       </div>
      <!-- Success Modal -->
      <div class="modal fade" id="successModal" tabindex="-1" role="dialog" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="successModalLabel">Success</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              Report downloaded successfully!
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Modal -->
      <div class="modal fade" id="chartModal" tabindex="-1" role="dialog" aria-labelledby="chartModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="chartModalLabel">Charts</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div id="loadingSpinnerCharts" class="text-center" style="display: none;">
                <div class="spinner-border" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
              <div id="chartContainer"></div>
            </div>
            <div class="modal-footer">
              <button id="downloadChartsButton" class="btn btn-success">Download Charts</button>
            </div>
          </div>
        </div>
      </div>

  
      <script>
        async function fetchSummaryData() {
          const response = await fetch('/admin/summary-data');
          return await response.json();
        }

        async function displaySummaryData() {
          const data = await fetchSummaryData();
          document.getElementById('totalStudents').textContent = data.totalStudents;
          document.getElementById('availableBeds').textContent = data.availableBeds;
          document.getElementById('totalRooms').textContent = data.totalRooms;
        }

        document.addEventListener('DOMContentLoaded', displaySummaryData);
  
          async function fetchChartData(url) {
            const response = await fetch(url);
            return await response.json();
          }

              // Gender Distribution Pie Chart with Percentages
              async function renderGenderDistributionChart() {
                const data = await fetchChartData('/admin/gender-distribution');
                const labels = data.map(item => item.std_gender);
                const counts = data.map(item => item.count);
                const total = counts.reduce((sum, count) => sum + count, 0);

                new Chart(document.getElementById('genderDistributionChart'), {
                  type: 'pie',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: 'Gender Distribution',
                      data: counts,
                      backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56'],
                    }]
                  },
                  options: {
                    plugins: {
                      datalabels: {
                        formatter: (value, context) => {
                          const percentage = (value / total * 100).toFixed(1);
                          return `${percentage}%`;
                        },
                        color: '#fff',
                        font: {
                          weight: 'bold'
                        }
                      }
                    }
                  },
                  plugins: [ChartDataLabels]
                });
              }

              // Students by Faculty Bar Chart 
        async function renderStudentsByFacultyChart() {
          const data = await fetchChartData('/admin/students-by-faculty');
          const labels = data.map(item => item.std_faculty);
          const counts = data.map(item => item.count);
          const maxCount = Math.max(...counts);

          new Chart(document.getElementById('studentsByFacultyChart'), {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [{
                label: 'Number of Students',
                data: counts,
                backgroundColor: counts.map(count => count === maxCount ? 'red' : 'gray')
              }]
            },
            options: {
              indexAxis: 'y',
              scales: {
                x: {
                  beginAtZero: true,
                  max: maxCount + 2, // Adjust the maximum value of the x-axis
                  grid: {
                    display: false
                  }
                },
                y: {
                  grid: {
                    display: false
                  }
                }
              },
              plugins: {
                legend: {
                  labels: {
                    generateLabels: (chart) => {
                      const dataset = chart.data.datasets[0];
                      return [
                        {
                          text: 'Number of Students',
                          fillStyle: 'gray', // Set the legend box color to gray
                          hidden: false,
                          lineCap: 'butt',
                          lineDash: [],
                          lineDashOffset: 0,
                          lineJoin: 'miter',
                          strokeStyle: 'gray',
                          pointStyle: 'rect',
                          datasetIndex: 0
                        },
                        {
                          text: 'Highest Count',
                          fillStyle: 'red', // Set the legend box color to red
                          hidden: false,
                          lineCap: 'butt',
                          lineDash: [],
                          lineDashOffset: 0,
                          lineJoin: 'miter',
                          strokeStyle: 'red',
                          pointStyle: 'rect',
                          datasetIndex: 0
                        }
                      ];
                    }
                  }
                },
                datalabels: {
                  anchor: 'end',
                  align: 'end', // Position the label at the tip of the bar
                  offset: 5, // Adjust this value to move the labels further out
                  color: 'black',
                  font: {
                    weight: 'bold'
                  },
                  formatter: function(value, context) {
                    return value;
                  }
                }
              }
            },
            plugins: [ChartDataLabels]
          });
        }

          // Room Environment Preference Pie Chart
              async function renderRoomEnvironmentPreferenceChart() {
                const data = await fetchChartData('/admin/room-environment-preference');
                const labels = data.map(item => item.std_pref);
                const counts = data.map(item => item.count);
                const total = counts.reduce((sum, count) => sum + count, 0);

                new Chart(document.getElementById('roomEnvironmentPreferenceChart'), {
                  type: 'doughnut',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: 'Room Environment Preference',
                      data: counts,
                      backgroundColor: ['#009596', '#06C', '#EC7A08','grey']
                    }]
                  },
                  options: {
                    plugins: {
                      datalabels: {
                        formatter: (value, context) => {
                          const percentage = (value / total * 100).toFixed(1);
                          return `${percentage}%`;
                        },
                        color: '#fff',
                        font: {
                          weight: 'bold'
                        }
                      }
                    }
                  },
                  plugins: [ChartDataLabels]
                });
              }

          // Students by Year of Study Column Chart with Customizations
          async function renderStudentsByYearOfStudyChart() {
            const data = await fetchChartData('/admin/year-of-degree');
            const labels = ["FIRST", "SECOND", "THIRD", "FOURTH"];
            const counts = labels.map(label => {
              const item = data.find(d => d.std_year.toUpperCase() === label);
              return item ? item.count : 0;
            });

            new Chart(document.getElementById('studentsByYearOfStudyChart'), {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [{
                  label: 'Number of Students',
                  data: counts,
                  backgroundColor: '#519DE9'
                }]
              },
              options: {
                scales: {
                  x: {
                    grid: {
                      display: false
                    }
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  datalabels: {
                    anchor: 'end',
                    align: 'end',
                    color: 'black',
                    font: {
                      weight: 'bold'
                    }
                  }
                }
              },
              plugins: [ChartDataLabels]
            });
          }
        
            // Room type distribution Chart
          async function renderRoomTypeDistributionChart() {
            const data = await fetchChartData('/admin/room-type-distribution');
            const labels = ['Single Room', 'Double Room', 'Quad Room'];
            const maleCounts = labels.map(label => {
              const roomCapacity = label === 'Single Room' ? 1 : label === 'Double Room' ? 2 : 4;
              const item = data.find(d => d.room_capacity == roomCapacity && d.room_gender === 'Male');
              return item ? item.count : 0;
            });
            const femaleCounts = labels.map(label => {
              const roomCapacity = label === 'Single Room' ? 1 : label === 'Double Room' ? 2 : 4;
              const item = data.find(d => d.room_capacity == roomCapacity && d.room_gender === 'Female');
              return item ? item.count : 0;
            });

            const totalCounts = labels.map((label, index) => maleCounts[index] + femaleCounts[index]);

            new Chart(document.getElementById('roomTypeDistributionChart'), {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [
                  {
                    label: 'Male',
                    data: maleCounts,
                    backgroundColor: '#36A2EB',
                  },
                  {
                    label: 'Female',
                    data: femaleCounts,
                    backgroundColor: '#FF6384',
                  }
                ]
              },
              options: {
                layout: {
                  padding: {
                    top: 20,
                    bottom: 20
                  }
                },
                scales: {
                  x: {
                    grid: {
                      display: false
                    },
                    stacked: true
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    },
                    stacked: true
                  }
                },
                plugins: {
                  legend: {
                    position: 'bottom',
                  },
                  datalabels: {
                    color: 'black',
                    display: function(context) {
                      return context.datasetIndex === context.chart.data.datasets.length - 1;
                    },
                    anchor: 'end',
                    align: 'top',
                    offset: 6,
                    font: {
                      weight: 'bold'
                    },
                    formatter: function(value, context) {
                      const index = context.dataIndex;
                      return totalCounts[index];
                    }
                  }
                }
              },
              plugins: [ChartDataLabels]
            });
          }
        
            // Room occupancy Chart
          async function renderRoomOccupancyChart() {
            const data = await fetchChartData('/admin/room-occupancy');
            const labels = ['Single Room', 'Double Room', 'Quad Room'];

            const maleData = {
              'Single Room': { total_occupancy: 0, bed_avail: 0 },
              'Double Room': { total_occupancy: 0, bed_avail: 0 },
              'Quad Room': { total_occupancy: 0, bed_avail: 0 }
            };

            const femaleData = {
              'Single Room': { total_occupancy: 0, bed_avail: 0 },
              'Double Room': { total_occupancy: 0, bed_avail: 0 },
              'Quad Room': { total_occupancy: 0, bed_avail: 0 }
            };

            data.forEach(item => {
              const roomType = item.room_capacity === 1 ? 'Single Room' : item.room_capacity === 2 ? 'Double Room' : 'Quad Room';
              if (item.room_gender === 'Male') {
                maleData[roomType].total_occupancy = item.total_occupancy;
                maleData[roomType].bed_avail = item.bed_avail;
              } else {
                femaleData[roomType].total_occupancy = item.total_occupancy;
                femaleData[roomType].bed_avail = item.bed_avail;
              }
            });

            const labelsExpanded = [
              'Single Room', 
              'Double Room', 
              'Quad Room', 
              'Single Room', 
              'Double Room', 
              'Quad Room'
            ];
            const totalOccupancy = [
              maleData['Single Room'].total_occupancy,
              maleData['Double Room'].total_occupancy,
              maleData['Quad Room'].total_occupancy,
              femaleData['Single Room'].total_occupancy,
              femaleData['Double Room'].total_occupancy,
              femaleData['Quad Room'].total_occupancy
            ];
            const bedAvail = [
              maleData['Single Room'].bed_avail,
              maleData['Double Room'].bed_avail,
              maleData['Quad Room'].bed_avail,
              femaleData['Single Room'].bed_avail,
              femaleData['Double Room'].bed_avail,
              femaleData['Quad Room'].bed_avail
            ];

            new Chart(document.getElementById('roomOccupancyChart'), {
              type: 'bar',
              data: {
                labels: labelsExpanded,
                datasets: [
                  {
                    label: 'Total Occupancy',
                    data: totalOccupancy,
                    backgroundColor: '#36A2EB',
                  },
                  {
                    label: 'Available Beds',
                    data: bedAvail,
                    backgroundColor: '#F5DEB3',
                  }
                ]
              },
              options: {
                scales: {
                  x: {
                    grid: {
                      display: true
                    }
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  datalabels: {
                    anchor: 'end',
                    align: 'end',
                    color: 'black',
                    font: {
                      weight: 'bold'
                    },
                    formatter: function(value, context) {
                      return value;
                    }
                  }
                },
                responsive: true,
                maintainAspectRatio: false
              },
              plugins: [ChartDataLabels]
            });
          }

             // state of residence Chart
              async function renderStateOfResidenceMap() {
                const data = await fetchChartData('/admin/state-of-residence');
                const stateData = {};
                data.forEach(item => {
                  stateData[item.std_state.toUpperCase()] = item.count;
                });

                // Fetch Malaysia GeoJSON data
                const response = await fetch('/json/malaysia-states.json');
                const statesGeoJSON = await response.json();

                // Filter the GeoJSON to include only the specified states
                const filteredGeoJSON = {
                  type: 'FeatureCollection',
                  features: statesGeoJSON.features.filter(feature =>
                    ['JOHOR', 'KEDAH', 'KELANTAN', 'MELAKA', 'NEGERI SEMBILAN', 'PAHANG', 'PULAU PINANG', 'PERAK', 'PERLIS', 'SABAH', 'SARAWAK', 'SELANGOR', 'TERENGGANU', 'KUALA LUMPUR', 'LABUAN', 'PUTRAJAYA']
                    .includes(feature.properties.name.toUpperCase())
                  )
                };

                const map = L.map('stateOfResidenceMap').setView([4.203998, 109.170778], 6); // Centered on Malaysia

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                  maxZoom: 18,
                }).addTo(map);

                L.geoJSON(filteredGeoJSON, {
                  style: feature => {
                    const count = stateData[feature.properties.name.toUpperCase()] || 0;
                    const fillColor = count > 50 ? '#800026' :
                                      count > 20 ? '#BD0026' :
                                      count > 10 ? '#E31A1C' :
                                      count > 5  ? '#FC4E2A' :
                                      count > 0  ? '#FD8D3C' : '#FFEDA0';
                    return { fillColor, weight: 2, opacity: 1, color: 'white', dashArray: '3', fillOpacity: 0.7 };
                  },
                  onEachFeature: (feature, layer) => {
                    const count = stateData[feature.properties.name.toUpperCase()] || 0;
                    const center = layer.getBounds().getCenter();
                    L.marker(center, {
                      icon: L.divIcon({
                        className: 'label',
                        html: `<div>${count}</div>`,
                        iconSize: [30, 30]
                      })
                    }).addTo(map);
                    layer.bindPopup(`${feature.properties.name}: ${count} students`);
                  }
                }).addTo(map);
              }

            // Student Registration Over Time Line Chart
          async function fetchFilteredData(year) {
            // Adjust the URL and query parameters based on the filters
            let url = `/admin/student-registration-over-time?year=${year}`;
            return await fetchChartData(url);
          }

          let registrationChart;

          function getMonthLabels(year) {
            const months = [];
            for (let month = 0; month < 12; month++) {
              months.push(new Date(year, month, 12).toISOString().split('T')[0]);
            }
            return months;
          }

          async function updateChart() {
            const year = document.getElementById('yearFilter').value;
            const data = await fetchFilteredData(year);

            // Initialize arrays of months with zero counts for males and females
            const monthLabels = getMonthLabels(year);
            const maleCounts = Array(12).fill(0);
            const femaleCounts = Array(12).fill(0);

            // Populate the counts arrays with actual data
            data.forEach(item => {
              const monthIndex = new Date(item.date).getMonth();
              if (item.std_gender === 'Male') {
                maleCounts[monthIndex] = item.count;
              } else if (item.std_gender === 'Female') {
                femaleCounts[monthIndex] = item.count;
              }
            });

            if (registrationChart) {
              registrationChart.destroy();
            }

            registrationChart = new Chart(document.getElementById('studentRegistrationOverTimeChart'), {
              type: 'line',
              data: {
                labels: monthLabels,
                datasets: [
                  {
                    label: 'Male Registrations',
                    data: maleCounts,
                    backgroundColor: 'rgba(54, 162, 235, 1)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    fill: false
                  },
                  {
                    label: 'Female Registrations',
                    data: femaleCounts,
                    backgroundColor: 'rgba(255, 99, 132, 1)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 2,
                    fill: false
                  }
                ]
              },
              options: {
                scales: {
                  x: {
                    type: 'time',
                    time: {
                      unit: 'month',
                      tooltipFormat: 'MMM yyyy',
                      displayFormats: {
                        month: 'MMM yyyy'
                      }
                    },
                    grid: {
                      display: false
                    }
                    
                  },
                  y: {
                    beginAtZero: true,
                    ticks: {
                      precision: 0
                    },
                    grid: {
                      display: false
                    }
                  }
                },
                plugins: {
                  legend: {
                    display: true
                  }
                }
              },
             // plugins: [ChartDataLabels]
            });
          }

          function populateYearOptions() {
            const currentYear = new Date().getFullYear();
            const yearFilter = document.getElementById('yearFilter');
            for (let year = currentYear; year >= 2000; year--) {
              const option = document.createElement('option');
              option.value = year;
              option.text = year;
              yearFilter.add(option);
            }
            yearFilter.value = currentYear; // Set the default value to the current year
          }

          document.addEventListener('DOMContentLoaded', () => {
            populateYearOptions();
            updateChart();
          });
        
        // Render all charts
        renderGenderDistributionChart();
        renderStudentsByFacultyChart();
        renderRoomEnvironmentPreferenceChart();
        renderStudentsByYearOfStudyChart();
        renderRoomTypeDistributionChart();
        renderRoomOccupancyChart();
        renderStateOfResidenceMap();
        renderStudentRegistrationOverTimeChart();
        </script>

      <script>
        // Function to fetch all chart data
        async function fetchAllChartData() {
          const genderDistribution = await fetchChartData('/admin/gender-distribution');
          const studentsByFaculty = await fetchChartData('/admin/students-by-faculty');
          const roomEnvironmentPreference = await fetchChartData('/admin/room-environment-preference');
          const yearOfDegree = await fetchChartData('/admin/year-of-degree');
          const roomTypeDistribution = await fetchChartData('/admin/room-type-distribution');
          const roomOccupancy = await fetchChartData('/admin/room-occupancy');
          const stateOfResidence = await fetchChartData('/admin/state-of-residence');
          const studentRegistrationOverTime = await fetchChartData(`/admin/student-registration-over-time?year=${new Date().getFullYear()}`);

          return {
            genderDistribution,
            studentsByFaculty,
            roomEnvironmentPreference,
            yearOfDegree,
            roomTypeDistribution,
            roomOccupancy,
            stateOfResidence,
            studentRegistrationOverTime
          };
        }

        // Function to analyze data with AI
        async function analyzeDataWithAI(data) {
          const response = await fetch('/api/analyze-data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            return result.message || result;
          } else {
            const error = await response.json();
            throw new Error(error.error || 'Unknown error');
          }
        }

        // Function to generate the report
        async function generateReport() {
          try {
            // Show the spinner
            document.getElementById('loadingSpinner').style.display = 'block';

            // Show the modal
            $('#reportModal').modal('show');

            // Fetch data from your system
            const data = await fetchAllChartData();

            // Perform descriptive analysis
            const descriptiveAnalysis = await analyzeDataWithAI({ stage: 'descriptive', data });

            // Perform predictive and prescriptive analysis based on descriptive analysis
            const fullAnalysis = await analyzeDataWithAI({ stage: 'predictive_prescriptive', data: { descriptiveAnalysis, originalData: data } });

            // Convert Markdown to HTML
            const descriptiveHTML = marked.parse(descriptiveAnalysis);
            const predictivePrescriptiveHTML = marked.parse(fullAnalysis);

            // Format the report
            const formattedReport = `
              <h2>Analysis Report</h2>
              <p>Date: ${new Date().toLocaleDateString()}</p>
              <h3>Descriptive Analysis</h3>
              <div>${descriptiveHTML}</div>
              <h3>Predictive and Prescriptive Analysis</h3>
              <div>${predictivePrescriptiveHTML}</div>
            `;

            // Display the analysis report in modal
            const reportContainer = document.getElementById('reportContainer');
            reportContainer.innerHTML = formattedReport;

            // Hide the spinner
            document.getElementById('loadingSpinner').style.display = 'none';

          } catch (error) {
            console.error('Error generating report:', error);
            alert('Failed to generate report: ' + error.message);
          }
        }

        // Function to download the report as PDF
        async function downloadReport() {
          try {
            const { jsPDF } = window.jspdf;
            const reportContainer = document.getElementById('reportContainer');

            // Show the download message
            const downloadingMessage = document.getElementById('downloadingMessage');
            downloadingMessage.style.display = 'block';

            // Hide the report modal
            $('#reportModal').modal('hide');

            // Force a reflow/repaint before starting the PDF generation
            await new Promise(resolve => requestAnimationFrame(resolve));

            // Use html2canvas to convert the HTML content to a canvas
            const canvas = await html2canvas(reportContainer, { scale: 2 });
            const imgData = canvas.toDataURL('image/png');

            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgProps = pdf.getImageProperties(imgData);
            const imgWidth = pdfWidth - 20; // Reduce width for margin
            const imgHeight = (imgProps.height * imgWidth) / imgProps.width;

            let heightLeft = imgHeight;
            let position = 10; // Start with a margin of 10mm

            pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
            heightLeft -= pdfHeight - 20;

            while (heightLeft > 0) {
              position = heightLeft - imgHeight + 10; // Add margin at the top
              pdf.addPage();
              pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
              heightLeft -= pdfHeight - 20;
            }

            pdf.save('report.pdf');

            // Hide the download message after download
            downloadingMessage.style.display = 'none';

            // Show the success modal
            $('#successModal').modal('show');
          } catch (error) {
            console.error('Error downloading report:', error);
            alert('Failed to download report: ' + error.message);

            // Hide the download message if there's an error
            downloadingMessage.style.display = 'none';
          }
        }

        function getChartImages() {
          const charts = document.querySelectorAll('canvas');
          const images = [];
          charts.forEach(chart => {
            images.push(chart.toDataURL('image/png'));
          });
          return images;
        }

        async function displayAndDownloadCharts() {
          try {
            // Show the spinner
            document.getElementById('loadingSpinnerCharts').style.display = 'block';

            // Show the modal
            $('#chartModal').modal('show');

            // Get chart images
            const images = getChartImages();
            const chartContainer = document.getElementById('chartContainer');
            chartContainer.innerHTML = ''; // Clear any existing images

            images.forEach((imageSrc, index) => {
              const img = document.createElement('img');
              img.src = imageSrc;
              img.style.width = '100%';
              img.style.marginBottom = '20px';
              chartContainer.appendChild(img);
            });

            // Hide the spinner
            document.getElementById('loadingSpinnerCharts').style.display = 'none';

          } catch (error) {
            console.error('Error displaying charts:', error);
            alert('Failed to display charts: ' + error.message);
          }
        }

        function downloadCharts() {
          try {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('p', 'mm', 'a4'); // 'p' for portrait, 'mm' for millimeters, 'a4' for A4 size
            const images = getChartImages();

            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const usableWidth = pageWidth - 2 * margin;
            const usableHeight = pageHeight - 2 * margin;
            const chartHeight = usableHeight / 2 - margin; // Divide the height to fit 2 charts per page

            // Add chart images to PDF
            images.forEach((image, index) => {
              if (index > 0 && index % 2 === 0) doc.addPage(); // Add a new page every two images

              const x = margin;
              const y = margin + (index % 2) * (chartHeight + margin); // Position the second image lower on the same page

              doc.addImage(image, 'PNG', x, y, usableWidth, chartHeight);
            });

            // Export PDF
            doc.save('charts.pdf');
          } catch (error) {
            console.error('Error downloading charts:', error);
            alert('Failed to download charts: ' + error.message);
          }
        }

        document.addEventListener('DOMContentLoaded', () => {
          document.getElementById('generateReportButton').addEventListener('click', generateReport);
          document.getElementById('displayChartsButton').addEventListener('click', displayAndDownloadCharts);
          document.getElementById('downloadReportButton').addEventListener('click', downloadReport);
          document.getElementById('downloadChartsButton').addEventListener('click', downloadCharts);
        });
      </script>

    
        <script>
            function logout() {
                window.location.href = '/admin-login.html';
            }
        </script>
  


    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
